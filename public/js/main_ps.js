// Generated by psc version 0.6.9.5
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    
    function showNumberImpl(n) {
      return n.toString();
    }
    ;
    
    function concatString(s1) {
      return function(s2) {
        return s1 + s2;
      };
    }
    ;
    var Semigroupoid = function ($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
        this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
        this.id = id;
    };
    var Show = function (show) {
        this.show = show;
    };
    var Functor = function ($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    var Semigroup = function ($less$greater) {
        this["<>"] = $less$greater;
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $plus$plus = function (__dict_Semigroup_2) {
        return $less$greater(__dict_Semigroup_2);
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var showNumber = new Show(showNumberImpl);
    var show = function (dict) {
        return dict.show;
    };
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var semigroupString = new Semigroup(concatString);
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    var liftA1 = function (__dict_Applicative_8) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_8["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_8)(f))(a);
            };
        };
    };
    var id = function (dict) {
        return dict.id;
    };
    var categoryArr = new Category(function () {
        return semigroupoidArr;
    }, function (x) {
        return x;
    });
    var ap = function (__dict_Monad_16) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                    return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                        return $$return(__dict_Monad_16)(_2(_1));
                    });
                });
            };
        };
    };
    return {
        Semigroup: Semigroup, 
        Monad: Monad, 
        Bind: Bind, 
        Applicative: Applicative, 
        Apply: Apply, 
        Functor: Functor, 
        Show: Show, 
        Category: Category, 
        Semigroupoid: Semigroupoid, 
        "++": $plus$plus, 
        "<>": $less$greater, 
        ap: ap, 
        "return": $$return, 
        ">>=": $greater$greater$eq, 
        liftA1: liftA1, 
        pure: pure, 
        "<*>": $less$times$greater, 
        show: show, 
        "$": $dollar, 
        id: id, 
        semigroupoidArr: semigroupoidArr, 
        categoryArr: categoryArr, 
        showNumber: showNumber, 
        semigroupString: semigroupString
    };
})();
var PS = PS || {};
PS.Data_Foreign_EasyFFI = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function unsafeForeignProcedure(args) {  return function (stmt) {    return Function(wrap(args.slice()))();    function wrap() {      return !args.length ? stmt : 'return function (' + args.shift() + ') { ' + wrap() + ' };';    }  };};
    var unsafeForeignFunction = function (args) {
        return function (expr) {
            return unsafeForeignProcedure(args)("return " + (expr + ";"));
        };
    };
    return {
        unsafeForeignProcedure: unsafeForeignProcedure, 
        unsafeForeignFunction: unsafeForeignFunction
    };
})();
var PS = PS || {};
PS.Graphics_D3_Unsafe = (function () {
    "use strict";
    var Data_Foreign_EasyFFI = PS.Data_Foreign_EasyFFI;
    var Prelude = PS.Prelude;
    var ffi = Data_Foreign_EasyFFI.unsafeForeignFunction;
    var unsafeCopy = ffi([ "scale", "" ])("scale.copy()");
    var unsafeDomain = ffi([ "domain", "scale", "" ])("scale.domain(domain)");
    var unsafeRange = ffi([ "values", "scale", "" ])("scale.range(values)");
    var unsafeToFunction = ffi([ "scale", "" ])("scale.copy()");
    return {
        unsafeToFunction: unsafeToFunction, 
        unsafeCopy: unsafeCopy, 
        unsafeRange: unsafeRange, 
        unsafeDomain: unsafeDomain
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function returnE(a) {
      return function() {
        return a;
      };
    }
    ;
    
    function bindE(a) {
      return function(f) {
        return function() {
          return f(a())();
        };
      };
    }
    ;
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        functorEff: functorEff, 
        applyEff: applyEff, 
        applicativeEff: applicativeEff, 
        bindEff: bindEff, 
        monadEff: monadEff
    };
})();
var PS = PS || {};
PS.Graphics_D3_Selection = (function () {
    "use strict";
    var Data_Foreign_EasyFFI = PS.Data_Foreign_EasyFFI;
    var Prelude = PS.Prelude;
    var Graphics_D3_Base = PS.Graphics_D3_Base;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Data_Foreign = PS.Data_Foreign;
    var Appendable = function (append) {
        this.append = append;
    };
    var Existing = function (attr, attr$prime, attr$prime$prime, remove, style, style$prime, style$prime$prime, text, text$prime, text$prime$prime) {
        this.attr = attr;
        this["attr'"] = attr$prime;
        this["attr''"] = attr$prime$prime;
        this.remove = remove;
        this.style = style;
        this["style'"] = style$prime;
        this["style''"] = style$prime$prime;
        this.text = text;
        this["text'"] = text$prime;
        this["text''"] = text$prime$prime;
    };
    var text$prime = function (dict) {
        return dict["text'"];
    };
    var style$prime = function (dict) {
        return dict["style'"];
    };
    var ffi = Data_Foreign_EasyFFI.unsafeForeignFunction;
    var rootSelect = ffi([ "selector", "" ])("d3.select(selector)");
    var selectAll = ffi([ "selector", "selection", "" ])("selection.selectAll(selector)");
    var unsafeAppend = ffi([ "tag", "selection", "" ])("selection.append(tag)");
    var unsafeAttr = function (__dict_AttrValue_70) {
        return ffi([ "key", "val", "selection", "" ])("selection.attr(key, val)");
    };
    var unsafeAttr$prime = function (__dict_AttrValue_71) {
        return ffi([ "key", "val", "selection", "" ])("selection.attr(key, val)");
    };
    var unsafeAttr$prime$prime = function (__dict_AttrValue_72) {
        return ffi([ "key", "val", "selection", "" ])("selection.attr(key, function (d, i) { return val(d)(i); })");
    };
    var unsafeRemove = ffi([ "selection", "" ])("selection.remove()");
    var unsafeStyle = ffi([ "key", "val", "selection", "" ])("selection.style(key, val)");
    var unsafeStyle$prime = ffi([ "key", "val", "selection", "" ])("selection.style(key, val)");
    var unsafeStyle$prime$prime = ffi([ "key", "val", "selection", "" ])("selection.style(key, function (d, i) { return val(d)(i); })");
    var unsafeText = ffi([ "text", "selection", "" ])("selection.text(text)");
    var unsafeText$prime = ffi([ "text", "selection", "" ])("selection.text(text)");
    var unsafeText$prime$prime = ffi([ "text", "selection", "" ])("selection.text(function (d, i) { return text(d)(i); })");
    var existingSelection = new Existing(function (__dict_AttrValue_81) {
        return unsafeAttr(__dict_AttrValue_81);
    }, function (__dict_AttrValue_82) {
        return unsafeAttr$prime(__dict_AttrValue_82);
    }, function (__dict_AttrValue_83) {
        return unsafeAttr$prime$prime(__dict_AttrValue_83);
    }, unsafeRemove, unsafeStyle, unsafeStyle$prime, unsafeStyle$prime$prime, unsafeText, unsafeText$prime, unsafeText$prime$prime);
    var enter = ffi([ "update", "" ])("update.enter()");
    var bind = ffi([ "array", "selection", "" ])("selection.data(array)");
    var appendableEnter = new Appendable(unsafeAppend);
    var append = function (dict) {
        return dict.append;
    };
    return {
        Appendable: Appendable, 
        Existing: Existing, 
        "text'": text$prime, 
        "style'": style$prime, 
        append: append, 
        enter: enter, 
        bind: bind, 
        selectAll: selectAll, 
        rootSelect: rootSelect, 
        appendableEnter: appendableEnter, 
        existingSelection: existingSelection
    };
})();
var PS = PS || {};
PS.Graphics_D3_Util = (function () {
    "use strict";
    var Data_Foreign_EasyFFI = PS.Data_Foreign_EasyFFI;
    var Prelude = PS.Prelude;
    var Data_Date = PS.Data_Date;
    var Magnitude = {};
    var $dot$dot = Prelude[">>="];
    var numberMagnitude = Magnitude;
    var max$prime = function (__dict_Magnitude_202) {
        return Data_Foreign_EasyFFI.unsafeForeignFunction([ "fn", "data" ])("d3.max(data, fn)");
    };
    return {
        Magnitude: Magnitude, 
        "..": $dot$dot, 
        "max'": max$prime, 
        numberMagnitude: numberMagnitude
    };
})();
var PS = PS || {};
PS.Graphics_D3_Scale = (function () {
    "use strict";
    var Data_Foreign_EasyFFI = PS.Data_Foreign_EasyFFI;
    var Prelude = PS.Prelude;
    var Graphics_D3_Unsafe = PS.Graphics_D3_Unsafe;
    var Graphics_D3_Base = PS.Graphics_D3_Base;
    var Graphics_D3_Interpolate = PS.Graphics_D3_Interpolate;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var linearScale = d3.scale.linear;
    var Scale = function (copy, domain, range, toFunction) {
        this.copy = copy;
        this.domain = domain;
        this.range = range;
        this.toFunction = toFunction;
    };
    var toFunction = function (dict) {
        return dict.toFunction;
    };
    var scaleLinear = new Scale(Graphics_D3_Unsafe.unsafeCopy, Graphics_D3_Unsafe.unsafeDomain, Graphics_D3_Unsafe.unsafeRange, Graphics_D3_Unsafe.unsafeToFunction);
    var range = function (dict) {
        return dict.range;
    };
    var domain = function (dict) {
        return dict.domain;
    };
    return {
        Scale: Scale, 
        toFunction: toFunction, 
        range: range, 
        domain: domain, 
        linearScale: linearScale, 
        scaleLinear: scaleLinear
    };
})();
var PS = PS || {};
PS.Main = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Graphics_D3_Util = PS.Graphics_D3_Util;
    var Graphics_D3_Scale = PS.Graphics_D3_Scale;
    var Graphics_D3_Selection = PS.Graphics_D3_Selection;
    var Graphics_D3_Base = PS.Graphics_D3_Base;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var array = [ 4, 8, 15, 16, 23, 42 ];
    var main = function __do() {
        var _11 = Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Scale.linearScale)(Graphics_D3_Scale.domain(Graphics_D3_Scale.scaleLinear)([ 0, Graphics_D3_Util["max'"](Graphics_D3_Util.numberMagnitude)(Prelude.id(Prelude.categoryArr))(array) ])))(Graphics_D3_Scale.range(Graphics_D3_Scale.scaleLinear)([ 0, 420 ])))(Graphics_D3_Scale.toFunction(Graphics_D3_Scale.scaleLinear))();
        return Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Selection.rootSelect(".chart"))(Graphics_D3_Selection.selectAll("div")))(Graphics_D3_Selection.bind(array)))(Graphics_D3_Selection.enter))(Graphics_D3_Selection.append(Graphics_D3_Selection.appendableEnter)("div")))(Graphics_D3_Selection["style'"](Graphics_D3_Selection.existingSelection)("width")(function (d) {
            return Prelude.show(Prelude.showNumber)(_11(d)) + "px";
        })))(Graphics_D3_Selection["text'"](Graphics_D3_Selection.existingSelection)(Prelude.show(Prelude.showNumber)))();
    };
    return {
        main: main, 
        array: array
    };
})();
PS.Main.main();

